// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Qx.Workflow.Processor;

#nullable disable

namespace Qx.Workflow.Processor.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240722042913_r0")]
    partial class r0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DeptUser", b =>
                {
                    b.Property<long>("DeptId")
                        .HasColumnType("bigint")
                        .HasColumnName("dept_id");

                    b.Property<long>("MembersId")
                        .HasColumnType("bigint")
                        .HasColumnName("members_id");

                    b.HasKey("DeptId", "MembersId")
                        .HasName("pk_dept_user");

                    b.HasIndex("MembersId")
                        .HasDatabaseName("ix_dept_user_members_id");

                    b.ToTable("dept_user", "dbo");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.ApprovalLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<string>("ExtraData")
                        .HasColumnType("text")
                        .HasColumnName("extra_data");

                    b.Property<bool>("IsTodo")
                        .HasColumnType("boolean")
                        .HasColumnName("is_todo");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint")
                        .HasColumnName("node_id");

                    b.Property<string>("NodeTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("node_title");

                    b.Property<long>("OperatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("operator_id");

                    b.Property<DateTime?>("OperatorTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("operator_time");

                    b.Property<string>("OperatorTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operator_title");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<long>("WorkflowInstanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_instance_id");

                    b.HasKey("Id")
                        .HasName("pk_approval_logs");

                    b.HasIndex("WorkflowInstanceId")
                        .HasDatabaseName("ix_approval_logs_workflow_instance_id");

                    b.ToTable("approval_logs", "dbo");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.Dept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Creator")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("creator");

                    b.Property<string>("Deleter")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleter");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<string>("LastModifier")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("last_modifier");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manager_id");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_depts");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_depts_manager_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_depts_parent_id");

                    b.ToTable("depts", "dbo");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Creator")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("creator");

                    b.Property<string>("Deleter")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleter");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<string>("LastModifier")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("last_modifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", "dbo");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Creator")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("creator");

                    b.Property<string>("Deleter")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleter");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<string>("LastModifier")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("last_modifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "dbo");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.Workflow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("catalog");

                    b.Property<long>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Creator")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("creator");

                    b.Property<string>("Deleter")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleter");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<string>("LastModifier")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("last_modifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_workflows");

                    b.ToTable("workflows", "dbo");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.WorkflowInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Creator")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("creator");

                    b.Property<string>("CurrentNode")
                        .HasColumnType("text")
                        .HasColumnName("current_node");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modification_time");

                    b.Property<string>("LastModifier")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("last_modifier");

                    b.Property<DateTime?>("ProcessEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("process_end_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_no");

                    b.Property<string>("Workflow")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workflow");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_id");

                    b.Property<string>("WorkflowTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workflow_title");

                    b.HasKey("Id")
                        .HasName("pk_workflow_instances");

                    b.ToTable("workflow_instances", "dbo");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<long>("MembersId")
                        .HasColumnType("bigint")
                        .HasColumnName("members_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("MembersId", "RoleId")
                        .HasName("pk_role_user");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_user_role_id");

                    b.ToTable("role_user", "dbo");
                });

            modelBuilder.Entity("WorkflowNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Flag")
                        .HasColumnType("integer")
                        .HasColumnName("flag");

                    b.Property<string>("NextStep")
                        .HasColumnType("text")
                        .HasColumnName("next_step");

                    b.Property<float>("PassRate")
                        .HasColumnType("real")
                        .HasColumnName("pass_rate");

                    b.Property<string>("People")
                        .HasColumnType("text")
                        .HasColumnName("people");

                    b.Property<int>("SignMethod")
                        .HasColumnType("integer")
                        .HasColumnName("sign_method");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_nodes");

                    b.HasIndex("WorkflowId")
                        .HasDatabaseName("ix_workflow_nodes_workflow_id");

                    b.ToTable("workflow_nodes", "dbo");
                });

            modelBuilder.Entity("DeptUser", b =>
                {
                    b.HasOne("Qx.Workflow.Processor.Dept", null)
                        .WithMany()
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dept_user_depts_dept_id");

                    b.HasOne("Qx.Workflow.Processor.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dept_user_users_members_id");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.ApprovalLog", b =>
                {
                    b.HasOne("Qx.Workflow.Processor.WorkflowInstance", null)
                        .WithMany("ApprovalLogs")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approval_logs_workflow_instances_workflow_instance_id");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.Dept", b =>
                {
                    b.HasOne("Qx.Workflow.Processor.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_depts_users_manager_id");

                    b.HasOne("Qx.Workflow.Processor.Dept", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_depts_depts_parent_id");

                    b.Navigation("Manager");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.WorkflowInstance", b =>
                {
                    b.OwnsOne("Id_Title", "Promoter", b1 =>
                        {
                            b1.Property<long>("WorkflowInstanceId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("promoter_id");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("promoter_title");

                            b1.HasKey("WorkflowInstanceId");

                            b1.ToTable("workflow_instances", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowInstanceId")
                                .HasConstraintName("fk_workflow_instances_workflow_instances_id");
                        });

                    b.OwnsOne("Id_Title", "PromoterDept", b1 =>
                        {
                            b1.Property<long>("WorkflowInstanceId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("promoter_dept_id");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("promoter_dept_title");

                            b1.HasKey("WorkflowInstanceId");

                            b1.ToTable("workflow_instances", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowInstanceId")
                                .HasConstraintName("fk_workflow_instances_workflow_instances_id");
                        });

                    b.Navigation("Promoter")
                        .IsRequired();

                    b.Navigation("PromoterDept")
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Qx.Workflow.Processor.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_users_members_id");

                    b.HasOne("Qx.Workflow.Processor.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_roles_role_id");
                });

            modelBuilder.Entity("WorkflowNode", b =>
                {
                    b.HasOne("Qx.Workflow.Processor.Workflow", null)
                        .WithMany("Nodes")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_nodes_workflows_workflow_id");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.Workflow", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Qx.Workflow.Processor.WorkflowInstance", b =>
                {
                    b.Navigation("ApprovalLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
